rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for security
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(resource) {
      return isAuthenticated() && request.auth.uid == resource.data.user_id;
    }
    
    function isValidUser() {
      return isAuthenticated() && 
             request.auth.uid != null && 
             request.auth.uid.size() > 0;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             request.auth.token.admin == true;
    }
    
    function isValidTimestamp(timestamp) {
      return timestamp is timestamp && 
             timestamp <= request.time;
    }
    
    function isValidString(str, minLength, maxLength) {
      return str is string && 
             str.size() >= minLength && 
             str.size() <= maxLength;
    }
    
    function isValidEmail(email) {
      return email is string && 
             email.matches('^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$');
    }
    
    function hasValidSubscription() {
      return isAuthenticated() && 
             (request.auth.token.subscription_status == 'premium' ||
              request.auth.token.subscription_expires_at > request.time);
    }
    
    // Rate limiting helper (simplified)
    function withinRateLimit() {
      // In production, implement proper rate limiting
      return true;
    }
    
    // Users collection - user profile data
    match /users/{userId} {
      allow read: if isAuthenticated() && 
                     (request.auth.uid == userId || isAdmin());
      
      allow create: if isAuthenticated() && 
                       request.auth.uid == userId &&
                       isValidString(resource.data.display_name, 1, 100) &&
                       (resource.data.email == null || 
                        isValidEmail(resource.data.email)) &&
                       isValidTimestamp(resource.data.created_at);
      
      allow update: if isAuthenticated() && 
                       request.auth.uid == userId &&
                       // Prevent modification of system fields
                       resource.data.keys().hasAll(['created_at', 'id']) &&
                       request.resource.data.keys().hasAll(['created_at', 'id']) &&
                       resource.data.created_at == request.resource.data.created_at &&
                       resource.data.id == request.resource.data.id &&
                       // Validate updated fields
                       (request.resource.data.display_name == null ||
                        isValidString(request.resource.data.display_name, 1, 100)) &&
                       (request.resource.data.email == null || 
                        isValidEmail(request.resource.data.email));
      
      allow delete: if isAuthenticated() && 
                       (request.auth.uid == userId || isAdmin());
    }
    
    // User preferences - reading preferences and settings
    match /user_preferences/{userId} {
      allow read, write: if isAuthenticated() && 
                            request.auth.uid == userId;
      
      allow read: if isAdmin();
    }
    
    // Reading sessions - user's reading history and progress
    match /reading_sessions/{sessionId} {
      allow read, write: if isAuthenticated() && 
                            isOwner(resource) &&
                            withinRateLimit();
      
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.user_id &&
                       isValidTimestamp(request.resource.data.created_at) &&
                       request.resource.data.keys().hasAll(['user_id', 'book_id', 'created_at']);
      
      allow read: if isAdmin();
    }
    
    // Swipe logs - user interaction data for recommendations
    match /swipe_logs/{logId} {
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.user_id &&
                       request.resource.data.choice in [0, 1, -1] &&
                       request.resource.data.mode in ['tinder', 'facemash'] &&
                       isValidTimestamp(request.resource.data.created_at) &&
                       withinRateLimit();
      
      allow read: if isAuthenticated() && 
                     isOwner(resource);
      
      allow read: if isAdmin();
    }
    
    // User ratings and reviews
    match /ratings/{ratingId} {
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.user_id &&
                       request.resource.data.rating is int &&
                       request.resource.data.rating >= 1 &&
                       request.resource.data.rating <= 5 &&
                       (request.resource.data.comment == null ||
                        isValidString(request.resource.data.comment, 0, 1000)) &&
                       isValidTimestamp(request.resource.data.created_at);
      
      allow update: if isAuthenticated() && 
                       isOwner(resource) &&
                       // Only allow updating rating and comment, not system fields
                       resource.data.user_id == request.resource.data.user_id &&
                       resource.data.book_id == request.resource.data.book_id &&
                       resource.data.created_at == request.resource.data.created_at;
      
      allow read: if isAuthenticated();
      
      allow delete: if isAuthenticated() && 
                       (isOwner(resource) || isAdmin());
    }
    
    // User bookmarks
    match /user_bookmarks/{bookmarkId} {
      allow read, write: if isAuthenticated() && 
                            isOwner(resource);
      
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.user_id &&
                       isValidTimestamp(request.resource.data.created_at);
      
      allow read: if isAdmin();
    }
    
    // Audio cache metadata (for offline capabilities)
    match /audio_cache/{cacheId} {
      allow read, write: if isAuthenticated() && 
                            isOwner(resource) &&
                            // Premium users get more cache space
                            (hasValidSubscription() || 
                             resource.data.total_size <= 100000000); // 100MB for free users
      
      allow create: if isAuthenticated() && 
                       request.auth.uid == request.resource.data.user_id;
    }
    
    // Notifications
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && 
                     isOwner(resource);
      
      allow update: if isAuthenticated() && 
                       isOwner(resource) &&
                       // Only allow marking as read
                       resource.data.keys().hasAll(['user_id', 'created_at']) &&
                       request.resource.data.keys().hasAll(['user_id', 'created_at']) &&
                       resource.data.user_id == request.resource.data.user_id &&
                       resource.data.created_at == request.resource.data.created_at;
      
      allow create: if isAdmin() || 
                       // Allow system to create notifications
                       request.auth.token.system == true;
    }
    
    // Reading analytics - aggregated reading data
    match /reading_analytics/{analyticsId} {
      allow read: if isAuthenticated() && 
                     isOwner(resource);
      
      allow create, update: if isAuthenticated() && 
                               request.auth.uid == request.resource.data.user_id;
      
      allow read: if isAdmin();
    }
    
    // User stats
    match /user_stats/{userId} {
      allow read: if isAuthenticated() && 
                     request.auth.uid == userId;
      
      allow read, write: if isAdmin();
    }
    
    // Public collections (read-only for users)
    
    // Books catalog - public read access
    match /books/{bookId} {
      allow read: if true; // Public access for book catalog
      allow write: if isAdmin();
    }
    
    // Quotes - public read access
    match /quotes/{quoteId} {
      allow read: if true; // Public access for quotes
      allow write: if isAdmin();
    }
    
    // Book chapters
    match /chapters/{chapterId} {
      allow read: if true; // Public access
      allow write: if isAdmin();
    }
    
    // Voice presets - public read access for available options
    match /voice_presets/{presetId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // BGM tracks - public read access
    match /bgm_tracks/{trackId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Environmental sounds - public read access
    match /environmental_sounds/{soundId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    // Admin-only collections
    
    // System configuration
    match /system_config/{configId} {
      allow read, write: if isAdmin();
    }
    
    // Security logs
    match /security_logs/{logId} {
      allow read, write: if isAdmin();
    }
    
    // Performance metrics
    match /performance_metrics/{metricId} {
      allow read, write: if isAdmin();
    }
    
    // Admin dashboard data
    match /admin_dashboard/{dataId} {
      allow read, write: if isAdmin();
    }
    
    // Recommendation training data (aggregated, anonymized)
    match /recommendation_training/{trainingId} {
      allow read, write: if isAdmin();
    }
    
    // Block access to any other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// Storage rules for Firebase Storage
service firebase.storage {
  match /b/{bucket}/o {
    // Audio files - public read, admin write
    match /audio/{allPaths=**} {
      allow read: if true; // Public access for TTS audio
      allow write: if request.auth != null && 
                      request.auth.token.admin == true;
    }
    
    // User profile images
    match /profile_images/{userId}/{fileName} {
      allow read: if true; // Public read access
      allow write: if request.auth != null && 
                      request.auth.uid == userId &&
                      // Limit file size to 5MB
                      request.resource.size <= 5 * 1024 * 1024 &&
                      // Only allow image files
                      request.resource.contentType.matches('image/.*');
    }
    
    // Book cover images - public read, admin write
    match /book_covers/{fileName} {
      allow read: if true;
      allow write: if request.auth != null && 
                      request.auth.token.admin == true;
    }
    
    // Audio cache for offline use
    match /user_cache/{userId}/{fileName} {
      allow read, write: if request.auth != null && 
                            request.auth.uid == userId &&
                            // Premium users get more storage
                            (request.auth.token.subscription_status == 'premium' ||
                             request.resource.size <= 100 * 1024 * 1024); // 100MB for free users
    }
    
    // System assets - public read, admin write
    match /assets/{fileName} {
      allow read: if true;
      allow write: if request.auth != null && 
                      request.auth.token.admin == true;
    }
    
    // Block all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}